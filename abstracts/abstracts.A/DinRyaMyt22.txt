TOGA: A Neural Method for Test Oracle Generation.

Testing is widely recognized as an important stage of the software
development lifecycle.
{{}}
Effective software testing can provide bene-
fits such as bug finding, preventing regressions, and documentation.
{{}}
In terms of documentation, unit tests express a unit’s intended
functionality, as conceived by the developer.
{{}}
A test oracle, typi-
cally expressed as an condition, documents the intended behavior
of a unit under a given test prefix.
{{}}
Synthesizing a functional test
oracle is a challenging problem, as it must capture the intended
functionality rather than the implemented functionality.
{{}}
In this paper, we propose TOGA (a neural method for Test Oracle
GenerAtion), a unified transformer-based neural approach to infer
both exceptional and assertion test oracles based on the context of
the focal method.
{{}}
Our approach can handle units with ambiguous
or missing documentation, and even units with a missing implemen-
tation.
{{}}
We evaluate our approach on both oracle inference accuracy
and functional bug-finding.
{{}}
Our technique improves accuracy by
33% over existing oracle inference approaches, achieving 96% over-
all accuracy on a held out test dataset.
{{}}
Furthermore, we show that
when integrated with a automated test generation tool (EvoSuite),
our approach finds 57 real world bugs in large-scale Java programs,
including 30 bugs that are not found by any other automated testing
method in our evaluation.
{{}}
ACM Reference Format:
{{}}
Elizabeth Dinella, Gabriel Ryan, Todd Mytkowicz, and Shuvendu K.
{{}}
Lahiri.
{{}}
2022.
{{}}
TOGA:
{{}}
A Neural Method for Test Oracle Generation.
{{}}
In 44th Inter-
national Conference on Software Engineering (ICSE ’22), May 21–29, 2022,
Pittsburgh, PA, USA.
{{}}
ACM, New York, NY, USA, 12 pages.
{{}}
https://doi.org/10.
{{}}
1145/3510003.3510141
1
Unit testing is a critical aspect of software development.
{{}}
Effective
unit tests for a component (a method, class, or module) can provide
documentation, find bugs, and prevent regressions.
{{}}
In terms of doc-
umentation, unit tests express the unit’s intended functionality, as
conceived by the developer.
{{}}
Documenting the unit’s functionality
∗ Performed   this work while interning at Microsoft.
{{}}
Equal contributor.
{{}}
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page.
{{}}
Copyrights for components of this work owned by others than ACM
must be honored.
{{}}
Abstracting with credit is permitted.
{{}}
To copy otherwise, or republish,
to post on servers or to redistribute to lists, requires prior specific permission and/or a
fee.
{{}}
Request permissions from permissions@acm.org.
{{}}
ICSE ’22, May 21–29, 2022, Pittsburgh, PA, USA
© 2022 Association for Computing Machinery.
{{}}
ACM ISBN 978-1-4503-9221-1/22/05.
{{}}
.
{{}}
. $
{{}}
15.00
https://doi.org/10.1145/3510003.3510141
{{}}
---
