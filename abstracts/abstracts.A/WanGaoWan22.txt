Automatic Detection, Validation, and Repair of Race Conditions in Interrupt-Driven Embedded Software.

Interrupt-driven programs are widely deployed in safety-critical embedded systems to perform hardware and resource
dependent data operation tasks.
{{background}}
The frequent use of interrupts in these systems can cause race conditions to occur due to interactions
between application tasks and interrupt handlers (or two interrupt handlers).
{{background}}
Numerous program analysis and testing techniques have
been proposed to detect races in multithreaded programs.
{{background}}
Little work, however, has addressed race condition problems related to
hardware interrupts.
{{gap}}
In this paper, we present SDRacer, an automated framework that can detect, validate and repair race conditions in
interrupt-driven embedded software.
{{objective}}
It uses a combination of static analysis and symbolic execution to generate input data for exercising
the potential races.
{{design}}
It then employs virtual platforms to dynamically validate these races by forcing the interrupts to occur at the potential
racing points.
{{design}}
Finally, it provides repair candidates to eliminate the detected races.
{{design}}
We evaluate SDRacer on nine real-world embedded
programs written in C language.
{{method}}
The results show that SDRacer can precisely detect and successfully fix race conditions.
{{result:i2}}
---
