Challenges of Resolving Merge Conflicts: A Mining and Survey Study.

In collaborative software development, merge conflicts arise when developers integrate concurrent code changes.
{{background}}
Practitioners
seek to minimize the number of merge conflicts because resolving them is difficult, time consuming, and often an error-prone task.
{{background}}
Despite a
substantial number of studies investigating merge conflicts, the challenges in merge conflict resolution are not well understood.
{{gap}}
Our goal is
to investigate which factors make merge conflicts longer to resolve in practice.
{{objective}}
To this end, we performed a two-phase study.
{{method}}
First, we
analyzed 66 projects containing around 81 thousand merge scenarios, involving 2 million files and over 10 million chunks.
{{method}}
For this analysis,
we use rank correlation, principal component analysis, multiple regression model, and effect-size analysis to investigate which independent
variables (e.g., number of conflicting chunks and files) mostly influence our dependent variable (i.e., time to merge).
{{method}}
We found that the
number of chunks, lines of code, conflicting chunks, developers involved, conflicting lines of code, conflicting files, and the complexity of the
conflicting code influence the merge conflict resolution time.
{{result}}
Second, we surveyed 140 developers from our subject projects aiming at crossvalidating our results from the first phase of our study.
{{method}}
As main results, (i) we found that committing small chunks makes merge conflict
resolution faster when leaving other independent variables untouched, (ii) we found evidence that merge scenario characteristics (e.g., the
number of lines of code or chunks changed in the merge scenario) are stronger correlated with our dependent variable than merge conflict
characteristics (e.g., the number of lines of code or chunks in conflict), (iii) we devise a taxonomy of four types of challenges in merge conflict
resolution, and (iv) we observed that the inherent dependencies among conflicting and non-conflicting code is one of the main factors
influencing the merge conflict resolution time.
{{conclusion,-ignorediff}}
---
Three conclusions mixing past tense with present tense general statements.
Why? I think the authors are treating their survey responses as gospel.
The effect is that they (mostly) sound conclusionish, in a wrong way, because the overall
structure is meant to be method-result-method-result.