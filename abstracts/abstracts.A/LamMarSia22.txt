Translating quality-driven code change selection to an instance of multiple-criteria decision making.

Context:
{{h-background}}
The definition and assessment of software quality have not converged to a single specification.
{{background}}
Each
team may formulate its own notion of quality and tools and methodologies for measuring it.
{{background}}
Software quality
can be improved via code changes, most often as part of a software maintenance loop.
{{background}}
Objective:
{{h-objective}}
This manuscript contributes towards providing decision support for code change selection given a)
a set of preferences on a software product’s qualities and b) a pool of heterogeneous code changes to select
from.
{{objective}}
Method:
{{h-method}}
We formulate the problem as an instance of Multiple-Criteria Decision Making, for which we provide
both an abstract flavor and a prototype implementation.
{{design}}
Our prototype targets energy efficiency, technical debt
and dependability.
{{design}}
Results:
{{h-result}}
This prototype achieved inconsistent results, in the sense of not always recommending changes
reflecting the decision maker’s preferences.
{{result:i1:u1}}
Encouraged from some positive cases and cognizant of our
prototype’s shortcomings, we propose directions for future research.
{{a-fposs}}
Conclusion:
{{h-conclusion}}
This paper should thus be viewed as an imperfect first step towards quality-driven, code
change-centered decision support and, simultaneously, as a curious yet pragmatic enough gaze on the road
ahead.
{{conclusion:timid}}
---
