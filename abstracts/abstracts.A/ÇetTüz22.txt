Analyzing developer contributions using artifact traceability graphs.

Context
{{h-background}}
In a software project, properly analyzing the contributions of developers could
provide valuable insights for decision-makers.
{{background}}
The contributions of a developer could be
in many different forms such as committing and reviewing code, opening and resolving
issues.
{{background}}
Previous approaches mainly consider the commit-based contributions which provide
an incomplete picture of developer contributions.
{{gap}}
Objective
{{h-objective}}
Different from the traditional commit-based approaches for analyzing developer
contributions, we aim to provide a more holistic approach to reflect the rich set of software
development activities using artifact traceability graphs.
{{objective}}
Method
{{h-method}}
For analyzing the developer contributions, we propose a novel categorization of
developers (Jacks, Mavens and Connectors) in a software project.
{{design}}
We introduce a set of algorithms on artifact traceability graphs to identify key developers, recommend replacements
for leaving developers and evaluate knowledge distribution among developers.
{{design}}
Results
{{h-result}}
We evaluate our proposed algorithms on six open-source projects and demonstrate
that the identified key developers match the top commenters up to 98%, recommended
replacements are correct up to 91% and identified knowledge distribution labels are
compatible 94% on average with the baseline approaches.
{{method,result}}
Conclusions
{{h-conclusion}}
The proposed algorithms using artifact traceability graphs for analyzing developer contributions could be used by software project decision-makers in several scenarios.
{{conclusion}}
(1) Identifying different types of key developers.
{{conclusion}}
(2) Finding a replacement developer in
large teams.
{{conclusion}}
(3) Evaluating the overall knowledge distribution amongst developers to take
early precautions.
{{conclusion}}
---
