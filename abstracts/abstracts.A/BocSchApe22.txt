Measuring and Modeling Group Dynamics in Open-Source Software Development: A Tensor Decomposition Approach.


Many open-source software projects depend on a few core developers, who take over both the bulk of coordination and programming tasks.
{{background}}
They are supported by peripheral developers, who contribute either via
discussions or programming tasks, often for a limited time.
{{background}}
It is unclear what role these peripheral developers play in the programming and communication efforts, as well as the temporary task-related sub-groups
in the projects.
{{gap}}
We mine code-repository data and mailing-list discussions to model the relationships and
contributions of developers in a social network and devise a method to analyze the temporal collaboration
structures in communication and programming, learning about the strength and stability of social sub-groups
in open-source software projects.
{{objective,design}}
Our method uses multi-modal social networks on a series of time windows.
{{design}}
Previous work has reduced the network structure representing developer collaboration to networks with
only one type of interaction, which impedes the simultaneous analysis of more than one type of interaction.
{{background}}
We use both communication and version-control data of open-source software projects and model different
types of interaction over time.
{{design}}
To demonstrate the practicability of our measurement and analysis method,
we investigate 10 substantial and popular open-source software projects and show that, if sub-groups evolve,
modeling these sub-groups helps predict the future evolution of interaction levels of programmers and groups
of developers.
{{method,result:i1}}
Our method allows maintainers and other stakeholders of open-source software projects to assess instabilities and organizational changes in developer interaction and can be applied to different use cases
in organizational analysis, such as understanding the dynamics of a specific incident or discussion.
{{conclusion}}
---
The last sentence makes it clear that this is a design article.
I had considered this possibility in the objective statement, but the "learning about" phrase
makes that sentence announce an empirical work, not a design work.
However, misrepresenting a design work as an empirical work is bad for the quality of our data,
so I broke the "backward context" coding rule and changed 3 method codes into design.