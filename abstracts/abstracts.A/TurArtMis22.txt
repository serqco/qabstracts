Stubbifier: debloating dynamic server-side JavaScript applications.

JavaScript is an increasingly popular language for server-side development, thanks in part
to the Node.js runtime environment and its vast ecosystem of modules.
{{background}}
With the Node.js
package manager npm, users are able to easily include external modules as dependencies
in their projects.
{{background}}
However, npm installs modules with all of their functionality, even if only
a fraction is needed, which causes an undue increase in code size.
{{background}}
Eliminating this unused
functionality from distributions is desirable, but the sound analysis required to find unused
code is difficult due to JavaScript’s extreme dynamicity.
{{gap}}
We present a fully automatic technique that identifies unused code by constructing static or dynamic call graphs from the
application’s tests, and replacing code deemed unreachable with either file- or functionlevel stubs.
{{objective}}
Due to JavaScript’s highly dynamic nature, call graph construction may suffer
from unsoundness, i.e., code identified as unused may in fact be reachable.
{{design}}
To handle such
cases, if a stub is called, it will fetch and execute the original code on-demand to preserve
the application’s behavior.
{{design}}
The technique also provides an optional guarded execution mode
to guard application against injection vulnerabilities in untested code that resulted from
stub expansion.
{{design}}
This technique is implemented in an open source tool called Stubbifier,
designed to help package developers to produce a minimal production distribution.
{{design}}
Stubbifier supports the ECMAScript 2019 standard.
{{design}}
In an empirical evaluation on 15 Node.js
applications and 75 clients of these applications, Stubbifier reduced application size by 56%
on average while incurring only minor performance overhead.
{{method:u1,result}}
The evaluation also shows
that Stubbifier’s guarded execution mode is capable of preventing several known injection
vulnerabilities that are manifested in stubbed-out code.
{{result}}
Finally, Stubbifier can work alongside bundlers, popular JavaScript tools for bundling an application with its dependencies.
{{design}}
For the considered subject applications, we measured an average size reduction of 37% in
bundled distributions.
{{result}}
---
Sentence 6 could be `background`, but `design` fits as well and is better integrated into the abstract achetype, so I decided on `design`.
