Dynamic Update for Synthesized GR(1) Controllers.

Reactive synthesis is an automated procedure to obtain a correct-by-
construction reactive system from its temporal logic specification.
{{}}
GR(1) is an expressive fragment of LTL that enables efficient synthe-
sis and has been recently used in different contexts and application
domains.
{{}}
In this paper we investigate the dynamic-update problem
for GR(1):
{{}}
updating the behavior of an already running synthesized
controller such that it would safely and dynamically, without stop-
ping, start conforming to a modified, up-to-date specification.
{{}}
We
formally define the dynamic-update problem and present a sound
and complete solution that is based on the computation of a bridge-
controller.
{{}}
We implemented the work in the Spectra synthesis and
execution environment and evaluated it over benchmark specifi-
cations.
{{}}
The evaluation shows the efficiency and effectiveness of
using dynamic updates.
{{}}
The work advances the state-of-the-art
in reactive synthesis and opens the way to its use in application
domains where dynamic updates are a necessary requirement.
{{}}
ACM Reference Format:
{{}}
Gal Amram, Shahar Maoz, Itai Segall, and Matan Yossef.
{{}}
2022.
{{}}
Dynamic
Update for Synthesized GR(1) Controllers.
{{}}
In 44th International Conference on
Software Engineering (ICSE ’22), May 21–29, 2022, Pittsburgh, PA, USA.
{{}}
ACM,
New York, NY, USA, 12 pages.
{{}}
https://doi.org/10.1145/3510003.3510054
1
Reactive synthesis is an automated procedure to obtain a correct-
by-construction reactive system from its temporal logic specifica-
tion [35].
{{}}
Rather than manually constructing an implementation of
a reactive controller and using model checking to verify it against
a specification, synthesis offers an approach where a correct im-
plementation is automatically obtained for a given specification, if
such an implementation exists.
{{}}
GR(1) is a fragment of Linear Temporal Logic (LTL) that has an
efficient symbolic synthesis algorithm [7] and whose expressive
power covers most of the well-known LTL specification patterns of
Dwyer et al.
{{}}
[10, 24].
{{}}
GR(1) specifications include assumptions and
guarantees about what needs to hold on all initial states, on all states
and transitions (safety), and infinitely often on every run (justice).
{{}}
GR(1) has been used in several application domains, e.g., to spec-
ify and implement autonomous robots [20, 25], control protocols
for smart camera networks [33], distributed control protocols for
Permission to make digital or hard copies of part or all of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full citation
on the first page.
{{}}
Copyrights for third-party components of this work must be honored.
{{}}
For all other uses, contact the owner/author(s).
{{}}
ICSE ’22, May 21–29, 2022, Pittsburgh, PA, USA
© 2022 Copyright held by the owner/author(s).
{{}}
ACM ISBN 978-1-4503-9221-1/22/05.
{{}}
https://doi.org/10.1145/3510003.3510054
{{}}
---
