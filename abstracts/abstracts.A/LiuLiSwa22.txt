PUS: A Fast and Highly Efficient Solver for Inclusion-based Pointer Analysis.

A crucial performance bottleneck in most interprocedural static
analyses is solving pointer analysis constraints.
{{gap}}
We present Pus,
a highly efficient solver for inclusion-based pointer analysis.
{{objective}}
At
the heart of Pus is a new constraint solving algorithm that signifi-
cantly advances the state-of-the-art.
{{design}}
Unlike the existing algorithms
(i.e., wave and deep propagation) which construct a holistic con-
straint graph, at each stage Pus only considers partial constraints
that causally affect the final fixed-point computation.
{{design}}
In each itera-
tion Pus extracts a small causality subgraph and it guarantees that
only processing the causality subgraph is sufficient to reach the
same global fixed point.
{{design}}
Our extensive evaluation of Pus on a wide
range of real-world large complex programs yields highly promis-
ing results.
{{method:i1,a-result}}
Pus is able to analyze millions of lines of code such as
PostgreSQL in 10 minutes on a commodity laptop.
{{result}}
On average, Pus
is more than 7× faster in solving context-sensitive constraints, and
more than 2× faster in solving context-insensitive constraints com-
pared to the state of the art wave and deep propagation algorithms.
{{result}}
Moreover, Pus has been used to find tens of previous unknown bugs
in high-profile codebases including Linux, Redis, and Memcached.
{{result}}
---
