SSPCatcher: Learning to catch security patches.

Timely patching (i.e., the act of applying code changes to a program source code) is
paramount to safeguard users and maintainers against dire consequences of malicious
attacks.
{{}}
In practice, patching is prioritized following the nature of the code change that is
committed in the code repository.
{{}}
When such a change is labeled as being security-relevant,
i.e., as fixing a vulnerability, maintainers rapidly spread the change, and users are notified
about the need to update to a new version of the library or of the application.
{{}}
Unfortunately,
oftentimes, some security-relevant changes go unnoticed as they represent silent fixes of vulnerabilities.
{{}}
In this paper, we propose SSPCATCHER, a Co-Training-based approach to catch
security patches (i.e., patches that address vulnerable code) as part of an automatic monitoring service of code repositories.
{{}}
Leveraging different classes of features, we empirically
show that such automation is feasible and can yield a precision of over 80% in identifying
security patches, with an unprecedented recall of over 80%.
{{}}
Beyond such a benchmarking
with ground truth data which demonstrates an improvement over the state-of-the-art, we
confirmed that SSPCATCHER can help catch security patches that were not reported as such.
{{}}
1 Introduction
Recently, our digital world was shaken by two of the most widespread malware outbreaks
to date, namely WannaCry and Petya.
{{}}
Interestingly, both leveraged a known exploit with an
available patch (Trend Micro 2017).
{{}}
Despite the availability of such a patch that could have
prevented an infection, a large number of systems around the globe were impacted, leading
to a loss of over 4 billion US dollars (Berr 2017).
{{}}
In a typical scenario of vulnerability
correction, a developer proposes changes bundled as a software patch by pushing a commit
(i.e., patch + description of changes) to the code repository, which is analyzed by the project
maintainer, or a chain of maintainers.
{{}}
The maintainers eventually reject or apply the changes
{{}}
---
