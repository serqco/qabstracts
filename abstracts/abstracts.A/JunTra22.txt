Consolidating a common perspective on Technical Debt and its Management through a Tertiary Study.

Information and Software Technology 149 (2022) 106964

Contents lists available at ScienceDirect

Information and Software Technology
journal homepage:
{{}}
www.elsevier.com/locate/infsof

Consolidating a common perspective on Technical Debt and its Management
through a Tertiary Study
Helvio Jeronimo Junior a, b, *, Guilherme Horta Travassos a
a
b

Systems Engineering and Computer Science Program– PESC/COPPE, Universidade Federal do Rio de Janeiro, P.O.
{{}}
Box 68511, Rio de Janeiro, Brazil
Instituto Federal de Educação, Ciência e Tecnologia do Rio de Janeiro, Campus Niterói, P.O.
{{}}
Box 24315-375, Rio de Janeiro, Brazil

A R T I C L E I N F O

A B S T R A C T

Keywords:
{{}}
Technical debt
Software project management
Quality assurance
Tertiary study
Evidence-based software engineering

Context:
{{}}
Technical Debt (TD) contextualizes the technical decisions on shortcuts and workarounds during software
development, positively and negatively influencing software evolution.
{{}}
However, TD still seems to confound
with any issue occurring during software development, impacting its proper understanding and management in
software projects.
{{}}
Goal:
{{}}
To synthesize evidence regarding the conceptualization, characteristics, and management of TD in software
projects.
{{}}
Method:
{{}}
To undertake a tertiary study to strengthen the knowledge of TD using the principles of Grounded
Theory to support qualitative analysis.
{{}}
Results:
{{}}
Nineteen secondary studies provide evidence on TD and its management.
{{}}
They provided information
regarding the TD’s understanding (definitions and characteristics) and management (actions and technologies).
{{}}
Some causes, such as project constraints, technical decisions, and team members, promote different types of TD
in software projects.
{{}}
The secondary studies also supported identifying the impacts of TD regarding project
management, team members, the organization’s business, and internal software quality.
{{}}
Besides helping identify
TD challenges, such studies contributed to integrating a conjectured conceptual model of TD that can support
future discussions and investigations regarding TD’s understanding and management.
{{}}
Conclusions:
{{}}
The set of evidence regarding TD’s understanding, actions, and technologies to manage TD can aid
software practitioners in their software projects.
{{}}
However, it is observable an interpretation overload regarding
its definition, inducing to classify any issue occurring during the software development as TD.
{{}}
Therefore, further
discussions and investigations still represent essential steps towards consolidating a common perspective on TD
and its management.
{{}}
---
