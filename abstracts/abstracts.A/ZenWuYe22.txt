Fault Localization via Efficient Probabilistic Modeling of Program Semantics.

Testing-based fault localization has been a significant topic in soft-
ware engineering in the past decades.
{{background}}
It localizes a faulty program
element based on a set of passing and failing test executions.
{{background}}
Since
whether a fault could be triggered and detected by a test is related
to program semantics, it is crucial to model program semantics
in fault localization approaches.
{{background}}
Existing approaches either con-
sider the full semantics of the program (e.g., mutation-based fault
localization and angelic debugging), leading to scalability issues,
or ignore the semantics of the program (e.g., spectrum-based fault
localization), leading to imprecise localization results.
{{background}}
Our key idea
is:
{{objective}}
by modeling only the correctness of program values but not
their full semantics, a balance could be reached between effective-
ness and scalability.
{{objective}}
To realize this idea, we introduce a probabilis-
tic approach to model program semantics and utilize information
from static analysis and dynamic execution traces in our model-
ing.
{{design}}
Our approach, SmartFL (SeMantics bAsed pRobabilisTic Fault
Localization), is evaluated on a real-world dataset, Defects4J.
{{method}}
The
top-1 statement-level accuracy of our approach is 21%, which is
the best among state-of-the-art methods.
{{result}}
The average time cost
is 210 seconds per fault while existing methods that capture full
semantics are often 10x or more slower.
{{result}}
---
Colons are sometimes superfluous pseudo-sentence-ends, as here in objective.
For objective and conclusion (where only one sentence is expected) we could "correct" this 
in the analysis and count them as a single sentence.