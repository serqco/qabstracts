Imperative versus Declarative Collection Processing: An RCT on the Understandability of Traditional Loops versus the Stream API in Java.

Java introduced in version 8 with the Stream API means to operate
on collections using lambda expressions.
{{background}}
Since then, this API is an
alternative way to handle collections in a more declarative manner
instead of the traditional, imperative style using loops.
{{background}}
However,
whether the Stream API is beneficial in comparison to loops in terms
of usability is unclear.
{{gap}}
The present paper introduces a randomized
control trial (RCT) on the understandability of collection operations
performed on 20 participants with the dependent variables response
time and correctness.
{{objective,method:i1}}
As tasks, subjects had to determine the results
for collection operations (either defined with the Stream API or with
loops).
{{method}}
The results indicate that the Stream API has a significant
  𝑀𝑙𝑜𝑜𝑝
(p<.001) and large (𝜂𝑝2 =.695; 𝑀𝑠𝑡𝑟𝑒𝑎𝑚   ∼ 178%) positive effect on the
response times.
{{result}}
Furthermore, the usage of the Stream API caused
significantly less errors.
{{result:i1}}
And finally, the participants perceived their
speed with the Stream API higher compared to the loop-based code
and the participants considered the code based on the Stream API
as more readable.
{{result}}
Hence, while existing studies found a negative
effect of declarative constructs (in terms of lambda expressions) on
the usability of a main stream programming language, the present
study found the opposite:
{{conclusion}}
the present study gives evidence that
declarative code on collections using the Stream API based on
lambda expressions has a large, positive effect in comparison to
traditional loops.
{{conclusion}}
---
