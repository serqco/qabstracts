X-SBR: On the Use of the History of Refactorings for Explainable Search-Based Refactoring and Intelligent Change Operators.

Refactoring is widely adopted nowadays in industry to restructure the code and meet high quality while preserving the
external behavior.
{{}}
Many of the existing refactoring tools and research are based on search-based techniques to find relevant
recommendations by finding trade-offs between different quality attributes.
{{}}
While these techniques show promising results on opensource and industry projects, they lack explanations of the recommended changes which can impact their trustworthiness when
adopted in practice by developers.
{{}}
Furthermore, most of the adopted search-based techniques are based on random population
generation and random change operators (e.g., crossover and mutation).
{{}}
However, it is critical to understand which good refactoring
patterns may exist when applying change operators to either keep them or exchange with other solutions rather than destroying them
with random changes.
{{}}
In this paper, we propose knowledge-informed change operators and an improved seeding mechanism that we
integrated in a multi-objective genetic algorithm.
{{}}
We also provide explanations for refactoring solutions.
{{}}
First, we generate association
rules using the Apriori algorithm to find relationships between applied refactorings in previous commits, their locations, and their
rationale (quality improvements).
{{}}
Then, we use these rules to 1) initialize the population, 2) improve the change operators and seeding
mechanisms of the multi-objective search in order to preserve and exchange good patterns in the refactoring solutions, and 3) explain
how a sequence of refactorings collaborate in order to improve the quality of the system (e.g., fitness functions).
{{}}
The validation on large
open-source systems shows that X-SBR provides refactoring solutions of a better quality than those given by the state-of-the-art
techniques in terms of reducing the invalid refactorings, improving the quality, and increasing trustworthiness of the developers in the
suggested refactorings via the provided explanations.
{{}}
---
