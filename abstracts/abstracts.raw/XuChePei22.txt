Restore: Retrospective Fault Localization Enhancing Automated Program Repair.

Fault localization is a crucial step of automated program repair, because accurately identifying program locations that are
most closely implicated with a fault greatly affects the effectiveness of the patching process.
{{}}
An ideal fault localization technique would
provide precise information while requiring moderate computational resources—to best support an efficient search for correct fixes.
{{}}
In
contrast, most automated program repair tools use standard fault localization techniques—which are not tightly integrated with the
overall program repair process, and hence deliver only subpar efficiency.
{{}}
In this paper, we present retrospective fault localization:
{{}}
a
novel fault localization technique geared to the requirements of automated program repair.
{{}}
A key idea of retrospective fault localization
is to reuse the outcome of failed patch validation to support mutation-based dynamic analysis—providing accurate fault localization
information without incurring onerous computational costs.
{{}}
We implemented retrospective fault localization in a tool called RESTORE—
based on the JAID Java program repair system.
{{}}
Experiments involving faults from the DEFECTS4J standard benchmark indicate that
retrospective fault localization can boost automated program repair:
{{}}
RESTORE efficiently explores a large fix space, delivering state-ofthe-art effectiveness (41 DEFECTS4J bugs correctly fixed, 8 of which no other automated repair tool for Java can fix) while
simultaneously boosting performance (speedup over 3 compared to JAID).
{{}}
Retrospective fault localization is applicable to any
automated program repair techniques that rely on fault localization and dynamic validation of patches.
{{}}
Ç
1

INTRODUCTION

program repair has the potential to transform programming practice:
{{}}
by automatically building
fixes for bugs in real-world programs, it can help curb the
large amount of resources—in time and effort—that programmers devote to debugging [1].
{{}}
While the first viable
techniques tended to produce patches that overfit the few
tests typically available for validation [2], [3], automated
program repair tools have more recently improved precision (see Section 5.2 for a review) to the point where they
can often produce genuinely correct fixes—equivalent to
those a programmer would write.
{{}}
A crucial ingredient of most repair techniques—and
especially of so-called generate-and-validate approaches [4]—
is fault localization.
{{}}
Imitating the debugging process followed by human programmers, fault localization aims to

A

UTOMATED








Tongtong Xu is with the State Key Laboratory for Novel Software Technology, Nanjing University, Nanjing, Jiangsu 210023, China, and also with
the Department of Computing, The Hong Kong Polytechnic University,
Hung Hom, Hong Kong.
{{}}
E-mail:
{{}}
dz1633014@smail.nju.edu.cn.
{{}}
Liushan Chen and Yu Pei are with the Department of Computing,
The Hong Kong Polytechnic University, Hung Hom, Hong Kong.
{{}}
E-mail:
{{}}
{cslschen, csypei}@comp.polyu.edu.hk.
{{}}
Tian Zhang is with the State Key Laboratory for Novel Software Technology
of Nanjing University, Nanjing, Jiangsu 210023, China.
{{}}
E-mail:
{{}}
ztluck@nju.edu.cn.
{{}}
Minxue Pan is with the State Key Laboratory for Novel Software Technology and the Software Institute of Nanjing University, Nanjing, Jiangsu
210023, China.
{{}}
E-mail:
{{}}
mxp@nju.edu.cn.
{{}}
Carlo A.
{{}}
Furia is with the Software Institute of USI Universit
a della
Svizzera italiana, 6904 Lugano, Switzerland.
{{}}
E-mail:
{{}}
furiac@usi.ch.
{{}}
Manuscript received 27 May 2019; revised 22 Mar.
{{}}
2020; accepted 7 Apr.
{{}}
2020.
{{}}
Date of publication 15 Apr.
{{}}
2020; date of current version 10 Jan.
{{}}
2022.
{{}}
(Corresponding authors:
{{}}
Yu Pei, Tian Zhang, Minxue Pan, and Carlo A.
{{}}
Furia) .
{{}}
Recommended for acceptance by K.
{{}}
Sen.
{{}}
Digital Object Identifier no.
{{}}
10.1109/TSE.2020.2987862

identify program locations that are implicated with a fault
and where a patch should be applied.
{{}}
Fault localization in
program repair has to satisfy two apparently conflicting
requirements:
{{}}
it should be accurate (leading to few locations
highly suspicious of error), but also efficient (not taking too
much running time).
{{}}
In this paper, we propose a novel fault localization
approach—called retrospective fault localization, and presented
in Section 3—that improves accuracy while simultaneously
boosting efficiency by integrating closely within standard
automated program repair techniques.
{{}}
By providing a more
effective fault localization process, retrospective fault localization expands the space of possible fixes that can be searched
practically.
{{}}
Retrospective fault localization leverages mutation-based fault localization [5], [6] to boost localization accuracy.
{{}}
Since mutation-based fault localization is notoriously
time consuming, a key idea is to perform it as a derivative of
the usual program repair process.
{{}}
Precisely, retrospective
fault localization introduces a feedback loop that reuses, instead
of just discarding them, the candidate fixes that fail validation
to enhance the precision of fault localization.
{{}}
Candidate fixes
that pass some tests that the original (buggy) program failed
are probably closer to being correct, and hence they are used
to refine fault localization so that other similar candidate fixes
are more likely to be generated.
{{}}
We implemented retrospective fault localization in a tool
called RESTORE, built on top of JAID [7], a recent generateand-validate automated program repair tool for Java.
{{}}
Experiments with real-world bugs from the DEFECTS4J
curated benchmark [8] indicate that retrospective fault
localization significantly improves the overall effectiveness
of program repair in terms of correct fixes (for 41 faults in
DEFECTS4J, 8 more than any other automated repair tool for

0098-5589 © 2020 IEEE.
{{}}
Personal use is permitted, but republication/redistribution requires IEEE permission.
{{}}
See ht_tps://www.ieee.org/publications/rights/index.html for more information.
{{}}

{{}}
---
