A Multi-Armed Bandit Approach for Test Case Prioritization in Continuous Integration Environments.

Continuous Integration (CI) environments have been increasingly adopted in the industry to allow frequent integration of
software changes, making software evolution faster and cost-effective.
{{}}
In such environments, Test Case Prioritization (TCP) techniques
play an important role to reduce regression testing costs, establishing a test case execution order that usually maximizes early fault
detection.
{{}}
Existing works on TCP in CI environments (TCPCI) present some limitations.
{{}}
Few pieces of work consider CI particularities,
such as the test case volatility, that is, they do not consider the dynamic environment of the software life-cycle in which new test cases
can be added or removed (discontinued), characteristic related to the Exploration versus Exploitation (EvE) dilemma.
{{}}
To solve such a
dilemma an approach needs to balance:
{{}}
i) the diversity of test suite; and ii) the quantity of new test cases and test cases that are errorprone or that comprise high fault-detection capabilities.
{{}}
To deal with this, most approaches use, besides the
failure-history, other measures that rely on code instrumentation or require additional information, such as testing coverage.
{{}}
However,
to maintain the information updated can be difficult and time-consuming, not scalable due to the test budget of CI environments.
{{}}
In this
context, and to properly deal with the TCPCI problem, this work presents an approach based on Multi-Armed Bandit (MAB) called
COLEMAN (Combinatorial VOlatiLE Multi-Armed BANdit).
{{}}
The TCPCI problem falls into the category of volatile and combinatorial MAB,
because multiple arms (test cases) need to be selected, and they are added or removed over the cycles.
{{}}
We conducted an evaluation
considering three time budgets and eleven systems.
{{}}
The results show the applicability of our approach and that COLEMAN outperforms
the most similar approach from literature in terms of early fault detection and performance.
{{}}
---
