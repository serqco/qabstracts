Mutant Reduction Evaluation: What is There and What is Missing?

Mutant Reduction Evaluation:
{{}}
What is There and
What is Missing?
{{}}
PENG ZHANG, YANG WANG, XUTONG LIU, YANHUI LI, and YIBIAO YANG,
Nanjing University

ZIYUAN WANG, Nanjing University of Posts and Telecommunications
XIAOYU ZHOU, Southeast University
LIN CHEN and YUMING ZHOU, Nanjing University
Background.
{{}}
Mutation testing is a commonly used defect injection technique for evaluating the effectiveness of a test suite.
{{}}
However, it is usually computationally expensive.
{{}}
Therefore, many mutation reduction
strategies, which aim to reduce the number of mutants, have been proposed.
{{}}
Problem.
{{}}
It is important to measure the ability of a mutation reduction strategy to maintain test suite
effectiveness evaluation.
{{}}
However, existing evaluation indicators are unable to measure the “order-preserving
ability”, i.e., to what extent the mutation score order among test suites is maintained before and after mutation
reduction.
{{}}
As a result, misleading conclusions can be achieved when using existing indicators to evaluate the
reduction effectiveness.
{{}}
Objective.
{{}}
We aim to propose evaluation indicators to measure the “order-preserving ability” of a mutation
reduction strategy, which is important but missing in our community.
{{}}
Method.
{{}}
Given a test suite on a Software Under Test (SUT) with a set of original mutants, we leverage
the test suite to generate a group of test suites that have a partial order relationship in defect detecting ability.
{{}}
When evaluating a reduction strategy, we first construct two partial order relationships among the generated
test suites in terms of mutation score, one with the original mutants and another with the reduced mutants.
{{}}
Then, we measure the extent to which the partial order under the original mutants remains unchanged in
the partial order under the reduced mutants.
{{}}
The more partial order is unchanged, the stronger the Order
Preservation (OP) of the mutation reduction strategy is, and the more effective the reduction strategy is.
{{}}
Furthermore, we propose Effort-aware Relative Order Preservation (EROP) to measure how much gain
a mutation reduction strategy can provide compared with a random reduction strategy.
{{}}
Result.
{{}}
The experimental results show that OP and EROP are able to efficiently measure the “orderpreserving ability” of a mutation reduction strategy.
{{}}
As a result, they have a better ability to distinguish
various mutation reduction strategies compared with the existing evaluation indicators.
{{}}
In addition, we find

This work is partially supported by the National Natural Science Foundation of China (61772259, 62172205, 61872177,
62072194, 62172202).
{{}}
Authors’ addresses:
{{}}
P.
{{}}
Zhang, Y.
{{}}
Wang, X.
{{}}
Liu, Y.
{{}}
Li (corresponding author), Y.
{{}}
Yang, L.
{{}}
Chen (corresponding author),
and Y.
{{}}
Zhou (corresponding author), Department of Computer Science and Techonology Nanjing University 163 Xianlin Avenue, Qixia District Nanjing, Jiangsu Province, China, 210023; emails:
{{}}
{dz1833034, njuwy, xryu}@smail.nju.edu.cn,
{yanhuili, yangyibiao, lchen, zhouyuming}@nju.edu.cn; Z.
{{}}
Wang, School of Computer Science Nanjing University of
Posts and Telecommunications 9 Wenyuan Road, Qixia District Nanjing, Jiangsu Province, China, 210023; email:
{{}}
wangziyuan@njupt.edu.cn; X.
{{}}
Zhou, School of Computer Science and Engineering Souteast University 2 Souteast University, Jiangning District Nanjing, Jiangsu Province, China, 211189; email:
{{}}
zhouxy@seu.edu.cn.
{{}}
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee
provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and
the full citation on the first page.
{{}}
Copyrights for components of this work owned by others than ACM must be honored.
{{}}
Abstracting with credit is permitted.
{{}}
To copy otherwise, or republish, to post on servers or to redistribute to lists, requires
prior specific permission and/or a fee.
{{}}
Request permissions from permissions@acm.org.
{{}}
© 2022 Association for Computing Machinery.
{{}}
1049-331X/2022/07-ART69 $15.00
https://doi.org/10.1145/3522578
ACM Transactions on Software Engineering and Methodology, Vol.
{{}}
31, No.
{{}}
4, Article 69.
{{}}
Pub.
{{}}
date:
{{}}
July 2022.
{{}}
69
{{}}
---
