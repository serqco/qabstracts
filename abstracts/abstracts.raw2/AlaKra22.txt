How Scrum adds value to achieving software quality?

Scrum remains the most popular agile software development method implementation for a
variety of reasons; one important motive is to improve software quality.
{{}}
Yet many organizations fail to achieve quality improvements through the use of Scrum, and existing research
sheds little light on the value-add of Scrum for software quality.
{{}}
More specifically, (1)
how notions of software quality among Scrum practitioners relate to established quality
perspectives, (2) how Scrum helps teams to achieve higher software quality and (3) why
some teams fail to meet the objective of higher quality.
{{}}
We addressed these gaps through
a two-phased qualitative study based on 39 interviews and two in-depth case studies.
{{}}
We
find that Scrum practitioners emphasize established notions of external quality comprising of conformity to business needs and absence of defects, while they also value internal
quality, especially sustainable software design.
{{}}
Our results show that Scrum helps teams
achieve both dimensions of quality by promoting some social antecedents (collaboration,
psychological safety, accountability, transparency) and process-induced advantages (iterative development, formal inspection, and adaptation).
{{}}
Our findings unveil how these factors
contribute to achieving software quality and under what conditions their effects can fail
to materialize.
{{}}
These conditions include inconsistent Scrum implementations, cultural constraints, team tensions, and inaccessibility of end-users.
{{}}
In addition, the complexity of the
project aggravates the impact of these conditions.
{{}}
Taken together, these findings show that
Scrum can complement established quality assurance and software engineering practices by
promoting a social environment that is conducive to creating high-quality software.
{{}}
Based
on our findings, we provide specific recommendations for how practitioners can create such
an environment.
{{}}
---
