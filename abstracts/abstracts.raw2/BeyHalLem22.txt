Decomposing Software Verification into Off-the-Shelf Components: An Application to CEGAR.

Techniques for software verification are typically realized as co-
hesive units of software with tightly coupled components.
{{}}
This
makes it difficult to re-use components, and the potential for work-
load distribution is limited.
{{}}
Innovations in software verification
might find their way into practice faster if provided in smaller,
more specialized components.
{{}}
In this paper, we propose to strictly decompose software ver-
ification:
{{}}
the verification task is split into independent subtasks,
implemented by only loosely coupled components communicat-
ing via clearly defined interfaces.
{{}}
We apply this decomposition
concept to one of the most frequently employed techniques in soft-
ware verification:
{{}}
counterexample-guided abstraction refinement
(CEGAR).
{{}}
CEGAR is a technique to iteratively compute an abstract
model of the system.
{{}}
We develop a decomposition of CEGAR into
independent components with clearly defined interfaces that are
based on existing, standardized exchange formats.
{{}}
Its realization
component-based CEGAR (C-CEGAR) concerns the three core tasks of
CEGAR:
{{}}
abstract-model exploration, feasibility check, and precision
refinement.
{{}}
We experimentally show that — despite the necessity
of exchanging complex data via interfaces — the efficiency thereby
only reduces by a small constant factor while the precision in solv-
ing verification tasks even increases.
{{}}
We furthermore illustrate the
advantages of C-CEGAR by experimenting with different implemen-
tations of components, thereby further increasing the overall effec-
tiveness and testing that substitution of components works well.
{{}}
---
