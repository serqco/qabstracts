An empirical study of Android behavioural code smells detection.

Mobile applications (apps) are developed quickly and evolve continuously.
{{}}
Each development iteration may introduce poor design choices, and therefore produce code smells.
{{}}
Code
smells complexify source code and may impede the evolution and performance of mobile
apps.
{{}}
In addition to common object-oriented code smells, mobile apps have their own code
smells because of their limitations and constraints on resources like memory, performance
and energy consumption.
{{}}
Some of these mobile-specific smells are behavioural because
they describe an inappropriate behaviour that may negatively impact software quality.
{{}}
Many
tools exist to detect code smells in mobile apps, based specifically on static analysis techniques.
{{}}
In this paper, we are especially interested in two tools:
{{}}
PAPRIKA and ADOCTOR.
{{}}
Both tools use representative techniques from the literature and contain behavioural code
smells.
{{}}
We analyse the effectiveness of behavioural code smells detection in practice within
the tools of concern by performing an empirical study of code smells detected in apps.
{{}}
This
empirical study aims to answer two research questions.
{{}}
First, are the detection tools effective in detecting behavioural code smells?
{{}}
Second, are the behavioural code smells detected
by the tools consistent with their original literal definition?
{{}}
We emphasise the limitations
of detection using only static techniques and the lessons learned from our empirical study.
{{}}
This study shows that established static analysis methods deemed to be effective for code
smells detection are inadequate for behavioural mobile code smells detection.
{{}}
---
