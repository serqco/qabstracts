Trident: Controlling Side Effects in Automated Program Repair.

The goal of program repair is to eliminate a bug in a given program by automatically modifying its source code.
{{background}}
The majority
of real-world software is written in imperative programming languages.
{{background}}
Each function or expression in imperative code may have side
effects, observable effects beyond returning a value.
{{background}}
Existing program repair approaches have a limited ability to handle side effects.
{{gap}}
Previous test-driven semantic repair approaches only synthesise patches without side effects.
{{gap}}
Heuristic repair approaches generate
patches with side effects only if suitable code fragments exist in the program or a database of repair patterns, or can be derived from
training data.
{{gap}}
This work introduces Trident, the first test-driven program repair approach that synthesizes patches with side effects
without relying on the plastic surgery hypothesis, a database of patterns, or training data.
{{objective:u1}}
Trident relies on an interplay of several parts.
{{design}}
First, it infers a specification for synthesising side-effected patches using symbolic execution with a custom state merging strategy that
alleviates path explosion due to side effects.
{{design}}
Second, it uses a novel component-based patch synthesis approach that supports lvalues,
values that appear on the left-hand sides of assignments.
{{design}}
In an evaluation on open-source projects, Trident successfully repaired 6 out
of 10 real bugs that require insertion of new code with side effects, which previous techniques do not therefore repair.
{{method,result}}
Evaluated on the
ManyBugs benchmark, Trident successfully repaired two new bugs that previous approaches could not.
{{method,result}}
Adding patches with side
effects to the search space can exacerbate test-overfitting.
{{background}}
We experimentally demonstrate that the simple heuristic of preferring
patches with the fewest side effects alleviates the problem.
{{design,result}}
An evaluation on a large number of smaller programs shows that this
strategy reduces test-overfitting caused by side-effects, increasing the rate of correct patches from 33.3% to 58.3%.
{{method:i1,result}}
---
