In-IDE Code Generation from Natural Language: Promise and Challenges.


A great part of software development involves conceptualizing or communicating the underlying procedures
and logic that needs to be expressed in programs.
{{background}}
One major difficulty of programming is turning concept into
code, especially when dealing with the APIs of unfamiliar libraries.
{{background}}
Recently, there has been a proliferation
of machine learning methods for code generation and retrieval from natural language queries, but these have
primarily been evaluated purely based on retrieval accuracy or overlap of generated code with developerwritten code, and the actual effect of these methods on the developer workflow is surprisingly unattested.
{{gap}}
In
this article, we perform the first comprehensive investigation of the promise and challenges of using such
technology inside the PyCharm IDE, asking, "At the current state of technology does it improve developer
productivity or accuracy, how does it affect the developer experience, and what are the remaining gaps and
challenges?"
{{objective}}
To facilitate the study, we first develop a plugin for the PyCharm IDE that implements a hybrid of
code generation and code retrieval functionality, and we orchestrate virtual environments to enable collection
of many user events (e.g., web browsing, keystrokes, fine-grained code edits).
{{method}}
We ask developers with various
backgrounds to complete 7 varieties of 14 Python programming tasks ranging from basic file manipulation
to machine learning or data visualization, with or without the help of the plugin.
{{method}}
While qualitative surveys
of developer experience are largely positive, quantitative results with regards to increased productivity, code
quality, or program correctness are inconclusive.
{{method,result:i1}}
Further analysis identifies several pain points that could
improve the effectiveness of future machine learning-based code generation/retrieval developer assistants
and demonstrates when developers prefer code generation over code retrieval and vice versa.
{{a-result}}
We release all
data and software to pave the road for future empirical studies on this topic, as well as development of better
code generation models.
{{a-resourcepointer,fposs}}
---
