Revisiting Supervised and Unsupervised Methods for Effort-Aware Cross-Project Defect Prediction.


Change-level defect prediction is widely referred to as just-in-time (JIT) defect prediction since it identifies a defect-inducing change at the check-in time, and researchers have proposed many approaches based
on the language-independent change-level features.
{{background}}
These approaches can be divided into two types:
{{background}}
supervised approaches and unsupervised approaches, and their effectiveness has been verified on Java or
C++ projects.
{{background}}
However, whether the language-independent change-level features can effectively identify
the defects of JavaScript projects is still unknown.
{{background}}
Additionally, many researches have confirmed that supervised approaches outperform unsupervised approaches on Java or C++ projects when considering inspection effort.
{{background}}
However, whether supervised JIT defect prediction approaches can still perform best on
JavaScript projects is still unknown.
{{background}}
Lastly, prior proposed change-level features are programming language–
independent, whether programming language–specific change-level features can further improve the performance of JIT approaches on identifying defect-prone changes is also unknown.
{{gap}}
To address the aforementioned gap in knowledge, in this article, we collect and label the top-20 most starred
JavaScript projects on GitHub.
{{method}}
JavaScript is an extremely popular and widely used programming language
in the industry.
{{background}}
We propose five JavaScript-specific change-level features and conduct a large-scale empirical
study (i.e., involving a total of 176,902 changes) and find that (1) supervised JIT defect prediction approaches
(i.e., CBS+) still statistically significantly outperform unsupervised approaches on JavaScript projects when
considering inspection effort; (2) JavaScript-specific change-level features can further improve the performance of approach built with language-independent features on identifying defect-prone changes; (3) the
change-level features in the dimension of size (i.e., LT), diffusion (i.e., NF), and JavaScript-specific (i.e., SO and
TC) are the most important features for indicating the defect-proneness of a change on JavaScript projects;
and (4) project-related features (i.e., Stars, Branches, Def Ratio, Changes, Files, Defective, and Forks) have a
high association with the probability of a change to be a defect-prone one on JavaScript projects.
{{method,result:i4}}
---
