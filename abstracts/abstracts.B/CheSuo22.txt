Boosting Compiler Testing via Compiler Optimization Exploration.

Compilers are a kind of important software, and similar to the quality assurance of other software, compiler
testing is one of the most widely-used ways of guaranteeing their quality.
{{background}}
Compiler bugs tend to occur in
compiler optimizations.
{{background}}
Detecting optimization bugs needs to consider two main factors:
{{background}}
(1) the optimization
flags controlling the accessability of the compiler buggy code should be turned on; and (2) the test program
should be able to trigger the buggy code.
{{background}}
However, existing compiler testing approaches only consider the
latter to generate effective test programs, but just run them under several pre-defined optimization levels
(e.g., -O0, -O1, -O2, -O3, -Os in GCC).
{{gap}}
To better understand the influence of compiler optimizations on compiler testing, we conduct the first
empirical study, and find that (1) all the bugs detected under the widely-used optimization levels are also
detected under the explored optimization settings (we call a combination of optimization flags turned on for
compilation an optimization setting), while 83.54% of bugs are only detected under the latter; (2) there exist
both inhibition effect and promotion effect among optimization flags for compiler testing, indicating the
necessity and challenges of considering the factor of compiler optimizations in compiler testing.
{{objective,method,result}}
We then propose the first approach, called COTest, by considering both factors to test compilers.
{{objective}}
Specifically, COTest first adopts machine-learning (the XGBoost algorithm) to model the relationship between test
programs and optimization settings, to predict the bug-triggering probability of a test program under an
optimization setting.
{{design}}
Then, it designs a diversity augmentation strategy to select a set of diverse candidate
optimization settings for prediction for a test program.
{{design}}
Finally, Top-K optimization settings are selected for
compiler testing according to the predicted bug-triggering probabilities.
{{design}}
The experiments on GCC and LLVM
demonstrate its effectiveness, especially COTest detects 17 previously unknown bugs, 11 of which have been
fixed or confirmed by developers.
{{method:u2,result}}
---
