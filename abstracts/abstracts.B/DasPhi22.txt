Trace visualization within the Software City metaphor: Controlled experiments on program comprehension.

Context:
{{h-background}}
Especially with the rise of microservice architectures, software is hard to understand when just the
static dependencies are known.
{{background}}
The actual call paths and the dynamic behavior of the application are hidden
behind network communication.
{{background}}
To comprehend what is going on in the software the vast amount of runtime
data (traces) needs to be reduced and visualized.
{{need}}
Objective:
{{h-objective}}
This work explores more effective visualizations to support program comprehension based on
runtime data.
{{objective}}
The pure DynaCity visualization supports understanding normal behavior, while DynaCityrc
supports the comprehension of faulty behavior.
{{objective:u2}}
Method:
{{h-method}}
DynaCity uses the city metaphor for visualization.
{{design}}
Its novel trace visualization displays dynamic
dependencies as arcs atop the city.
{{design}}
To reduce the number of traces, DynaCity aggregates all requests between
the same two components into one arc whose brightness reflects both the number and the total duration of
the requests.
{{design}}
DynaCity also encodes dynamic trace data in a heatmap that it uses to light up the building:
{{design}}
the
brighter a building is, the more active it is, i.e., the more and the longer the requests are that it receives
and/or spawns.
{{design}}
An additional color scheme reflects any error/status codes among the aggregated traces.
{{design}}
In a controlled experiment, we compare our approach with a traditional trace visualization built into the
same Software City but showing all dependencies (without aggregation) as individual arcs and also disabling
the heatmap.
{{method}}
We also report on a second study that evaluates if an error-based coloring of only the arcs is
sufficient or if the buildings should also be colored.
{{method}}
We call this extension DynaCityrc as it is meant to support
root cause analyses.
{{design}}
The source code and the raw data of the quantitative evaluations are available from
https://github.com/qaware/dynacity.
{{resourcepointer}}
Results:
{{h-result}}
We show quantitatively that a group of professional software developers who participated in a
controlled experiment solve typical software comprehension tasks more correctly (11.7%) and also saved 5.83%
of the total allotted time with the help of DynaCity and that they prefer it over the more traditional dynamic
trace visualization.
{{method:i1,result}}
The color scheme based on HTTP error codes in DynaCityrc supports developers when
performing root cause analyses, as the median of them stated that the visualization helped them much in
solving the tasks.
{{design,result}}
The evaluation also shows that subjects using DynaCityrc with colored arcs and buildings
find the responsible component 26.2% and the underlying root cause 33.3% more correctly than the group
with just colored arcs.
{{result}}
They also ranked it 40% more helpful to color both.
{{result}}
Conclusion:
{{h-conclusion}}
The DynaCity visualization helps professional software engineers to understand the dynamic
behavior of a software system better and faster.
{{conclusion}}
The color encoding of error codes in DynaCityrc also helps
them with root cause analyses.
{{conclusion}}
---
